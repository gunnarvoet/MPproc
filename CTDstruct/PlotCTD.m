function [Ha,pp]=PlotCTD(CTD,pp);%function [Ha,pp]=PlotCTD(CTD,pp);%Modified from Kim Martini's multiaxis9.m, to accept a CTD structure and a%PP structure as delivered by defaultCTDplotParams_1d.  With only a CTD%structure as an argument, this function plots a multi-x-axis plot of T, S%and sigma-theta, with auto-scaled x axes.  %%%The PP structure allows a fair amount of flexibility over plotting%parameters.  Feel free to modify the defaultCTDplotParams_1d as needed.%%Examples: %  Ha=PlotCTD(CTD);  %Plot autoscaled T, S and sigma-theta%%  pp=defaultCTDplotParams_1d(2);  %make a pp to plot T, S, sigma-theta and DOX%  pp.PB{1}.lim=[15 19]; %set temperature limits%  Ha=multiaxis9_mha(CTD,pp);    %make the plot%%Adapted from the original multixaxis of RC Lien, M. Gregg 1nov96%Modified for Matlab 5.1, 18aug97, M.Gregg%Modified for Matlab, 9/22/2003 K. Martini%Modified for CTD structures, 3/04, MHA%Name and output arguments changed, 7/05 MHA%%Req'd functions: bottomaxis, ScootLabel,stair_plot% load property value structure or load defaultsif nargin<2    pp=defaultCTDplotParams_1d(1);endif ~isstruct(pp) %if a number is passed in, get a pp of that type    pp=defaultCTDplotParams_1d(pp);end%Set the lim field of each to [] so that the plotting routine knows to%autoscaleif pp.autoscale==1    for c=1:length(pp.plind)        pp.PB{pp.plind(c)}.lim=[];    endendcolumn=pp.wh;% check number of inputs%[nseries,nnpts]=size(pp.xaxes); nseries=length(pp.plind);%if nseries>4 error('too many input pairs'); end% match inputed Y-axis strings to respective matrices in the SWIMS structure axY=['CTD.' pp.yaxes];[axY]=eval(axY);%set ylimits for compat. with Kim'spp.ylimits=pp.zlim;% set default y limitsif isempty(pp.ylimits)==1    igy=find(~isnan(CTD.t(:,column)));    ymin=min(axY(igy)); ymax=max(axY(igy));    pp.ylimits=[ymin ymax];endfor i=1:nseries    ci=pp.plind(i); %The index into the variable list        % match inputed X-axis strings to respective matrices in the SWIMS structure    axX=[pp.PB{ci}.str];    [axX]=eval(axX);        % set default x limits    if isempty(pp.PB{ci}.lim)==1        %igx=find(~isnan(axX(:,column)));        %xmin=min(axX(igx)); xmax=max(axX(igx));        xmin=min(axX(:,column)); xmax=max(axX(:,column));        xspan=xmax-xmin;        xmin=xmin-.05*xspan; xmax=xmax+.05*xspan;        pp.PB{ci}.lim=[xmin xmax];    end             %create initial axis    Ha(i)=axes('position',pp.position,'box','off');        % define bottom position vector to use in bottomaxis.m    bottomposition = pp.position;    bottomposition(4) = pp.dy/4;        % plot data    if pp.PB{ci}.stair==1         ha=stair_plot(axX(:,column),axY,'y','y');    else        ha=plot(axX(:,column),axY);    end    set(gca,'XColor',pp.PB{pp.plind(1)}.linecolor,'XTickLabel',[],'YColor',pp.PB{pp.plind(1)}.linecolor,'ticklength',[0 .025])        % set upper axes layers background colors to none    if i~=1  set(gca,'Color','none'); end        % suppress x and y axes ticks    set(gca,'visible','on');    if pp.PB{ci}.ticks==0 set(gca,'xticklabel',' '); end    if pp.yticks==0	set(gca,'yticklabel',' '); end    if i>1         set(gca,'yticklabel',' ');    end        % set line properties    set(ha,'LineWidth',pp.PB{ci}.linethick,'linestyle',pp.PB{ci}.linestyle,'color',pp.PB{ci}.linecolor,'marker',pp.PB{ci}.marker)        % set limits    limits{i,1}=[pp.PB{ci}.lim, pp.ylimits];    axis(limits{i});        % reverse y axis    if pp.Yreverse==1 set(gca,'YDir','reverse'); end          % set x and y axis scale    if pp.PB{ci}.log==1 set(gca,'XScale','log'); end    if pp.Ylog==1 set(gca,'YScale','log'); end        % set title and titlesize    if ~isstr(pp.titletext) % if titletext=[]        pp.titletext=['lat ' num2str(CTD.lat(pp.wh)) ', lon ' num2str(CTD.lon(pp.wh)) ', ' CTD.cruise];        end        if i==nseries        hti=title(pp.titletext);        set(hti,'fontsize',pp.fontsize(3))    end        % set y label and ylabelsize    if isempty(pp.ylabel) pp.ylabel=pp.yaxes; end    hyli=ylabel(pp.ylabel);    set(hyli,'fontsize',pp.fontsize(2),'fontweight','bold')    if i>1 set(hyli,'String',' '); end        % moves x axis down by dy    bottomaxis(bottomposition,(i-1)*pp.dy)        % defines x labels     %MHA change 6/04: add units    thelabel=strcat(pp.PB{ci}.lab,' / ',pp.PB{ci}.units);    if isempty(pp.PB{ci}.lab) pp.PB{ci}.lab=pp.PB{ci}.str; end    hxli=xlabel(thelabel);    set(hxli,'fontsize',pp.fontsize(1),'fontweight','bold')            %Move the axes label up some. (was 0.7)    ScootLabel(hxli,0.7)        % set x axis color     set(gca,'FontSize',pp.fontsize(1),'xcolor',pp.PB{ci}.linecolor,'view',[0,90])        endhold off